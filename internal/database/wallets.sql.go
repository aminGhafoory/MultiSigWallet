// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: wallets.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createaWallet = `-- name: CreateaWallet :exec
INSERT INTO wallets(
    user_id,
    created_at,
    wallet_id,
    wallet_name,
    wallet_keystore,
    wallet_address
)
VALUES(
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
`

type CreateaWalletParams struct {
	UserID         uuid.UUID
	CreatedAt      time.Time
	WalletID       uuid.UUID
	WalletName     string
	WalletKeystore string
	WalletAddress  string
}

func (q *Queries) CreateaWallet(ctx context.Context, arg CreateaWalletParams) error {
	_, err := q.db.ExecContext(ctx, createaWallet,
		arg.UserID,
		arg.CreatedAt,
		arg.WalletID,
		arg.WalletName,
		arg.WalletKeystore,
		arg.WalletAddress,
	)
	return err
}

const deleteWallet = `-- name: DeleteWallet :exec
DELETE FROM wallets
WHERE user_id=$1 AND wallet_id=$2
`

type DeleteWalletParams struct {
	UserID   uuid.UUID
	WalletID uuid.UUID
}

func (q *Queries) DeleteWallet(ctx context.Context, arg DeleteWalletParams) error {
	_, err := q.db.ExecContext(ctx, deleteWallet, arg.UserID, arg.WalletID)
	return err
}

const getUserWalletByID = `-- name: GetUserWalletByID :one
SELECT wallet_keystore
	FROM wallets
	INNER JOIN users ON
		wallets.user_id = users.user_id
	WHERE users.user_id=$1 AND wallet_id =$2
`

type GetUserWalletByIDParams struct {
	UserID   uuid.UUID
	WalletID uuid.UUID
}

func (q *Queries) GetUserWalletByID(ctx context.Context, arg GetUserWalletByIDParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserWalletByID, arg.UserID, arg.WalletID)
	var wallet_keystore string
	err := row.Scan(&wallet_keystore)
	return wallet_keystore, err
}

const getUserWallets = `-- name: GetUserWallets :many
SELECT users.user_id, users.created_at, updated_at, email, password_hash, wallets.user_id, wallets.created_at, wallet_id, wallet_name, wallet_keystore, wallet_address
FROM
    users 
JOIN wallets ON 
    users.user_id = wallets.user_id 
WHERE 
    users.user_id=$1
`

type GetUserWalletsRow struct {
	UserID         uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Email          string
	PasswordHash   string
	UserID_2       uuid.UUID
	CreatedAt_2    time.Time
	WalletID       uuid.UUID
	WalletName     string
	WalletKeystore string
	WalletAddress  string
}

func (q *Queries) GetUserWallets(ctx context.Context, userID uuid.UUID) ([]GetUserWalletsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserWallets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserWalletsRow
	for rows.Next() {
		var i GetUserWalletsRow
		if err := rows.Scan(
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.PasswordHash,
			&i.UserID_2,
			&i.CreatedAt_2,
			&i.WalletID,
			&i.WalletName,
			&i.WalletKeystore,
			&i.WalletAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
