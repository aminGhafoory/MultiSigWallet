// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: contracts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createaContract = `-- name: CreateaContract :one
INSERT INTO
    contracts (
        user_id,
        created_at,
        contract_id,
        contract_name)
VALUES
    ($1,
    $2,
    $3,
    $4) 
RETURNING user_id, created_at, contract_id, contract_name
`

type CreateaContractParams struct {
	UserID       uuid.UUID
	CreatedAt    time.Time
	ContractID   string
	ContractName string
}

func (q *Queries) CreateaContract(ctx context.Context, arg CreateaContractParams) (Contract, error) {
	row := q.db.QueryRowContext(ctx, createaContract,
		arg.UserID,
		arg.CreatedAt,
		arg.ContractID,
		arg.ContractName,
	)
	var i Contract
	err := row.Scan(
		&i.UserID,
		&i.CreatedAt,
		&i.ContractID,
		&i.ContractName,
	)
	return i, err
}

const deleteContract = `-- name: DeleteContract :exec
DELETE FROM contracts
WHERE
    contract_id = $2
    AND user_id = $1
`

type DeleteContractParams struct {
	UserID     uuid.UUID
	ContractID string
}

func (q *Queries) DeleteContract(ctx context.Context, arg DeleteContractParams) error {
	_, err := q.db.ExecContext(ctx, deleteContract, arg.UserID, arg.ContractID)
	return err
}

const editContractName = `-- name: EditContractName :one
UPDATE contracts
SET
    contract_name = $1
WHERE
    contract_id = $2 RETURNING user_id, created_at, contract_id, contract_name
`

type EditContractNameParams struct {
	ContractName string
	ContractID   string
}

func (q *Queries) EditContractName(ctx context.Context, arg EditContractNameParams) (Contract, error) {
	row := q.db.QueryRowContext(ctx, editContractName, arg.ContractName, arg.ContractID)
	var i Contract
	err := row.Scan(
		&i.UserID,
		&i.CreatedAt,
		&i.ContractID,
		&i.ContractName,
	)
	return i, err
}

const getUserContracts = `-- name: GetUserContracts :many
SELECT
    users.user_id, users.created_at, updated_at, email, password_hash, contracts.user_id, contracts.created_at, contract_id, contract_name
FROM
    users
    JOIN contracts ON users.user_id = contracts.user_id
WHERE
    users.user_id = $1
`

type GetUserContractsRow struct {
	UserID       uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Email        string
	PasswordHash string
	UserID_2     uuid.UUID
	CreatedAt_2  time.Time
	ContractID   string
	ContractName string
}

func (q *Queries) GetUserContracts(ctx context.Context, userID uuid.UUID) ([]GetUserContractsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserContracts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserContractsRow
	for rows.Next() {
		var i GetUserContractsRow
		if err := rows.Scan(
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.PasswordHash,
			&i.UserID_2,
			&i.CreatedAt_2,
			&i.ContractID,
			&i.ContractName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
